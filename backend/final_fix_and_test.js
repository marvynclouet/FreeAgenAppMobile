const axios = require('axios');

async function finalFixAndTest() {
  try {
    console.log('üîß Correction finale et test du syst√®me premium...\n');
    
    const baseURL = 'https://freeagenappmobile-production.up.railway.app';
    
    // 1. Test de connectivit√©
    console.log('1. Test de connectivit√©...');
    const healthResponse = await axios.get(`${baseURL}/api/auth/health`);
    console.log(`‚úÖ Backend accessible: ${healthResponse.status}`);
    console.log(`   Message: ${healthResponse.data.message}\n`);
    
    // 2. Cr√©er un utilisateur premium de test
    console.log('2. Cr√©ation d\'un utilisateur premium...');
    const userData = {
      email: 'premium-final@freeagent.com',
      password: 'Premium123!',
      name: 'Premium Final User',
      profile_type: 'player'
    };
    
    let token;
    let userId;
    
    try {
      const createResponse = await axios.post(`${baseURL}/api/auth/register`, userData);
      console.log('‚úÖ Utilisateur cr√©√©!');
      console.log(`   User ID: ${createResponse.data.user.id}`);
      console.log(`   Subscription: ${createResponse.data.user.subscription_type || 'undefined'}`);
      console.log(`   Premium: ${createResponse.data.user.is_premium || 'undefined'}`);
      
      token = createResponse.data.token;
      userId = createResponse.data.user.id;
      
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚ö†Ô∏è  Utilisateur existe, login...');
        const loginResponse = await axios.post(`${baseURL}/api/auth/login`, {
          email: userData.email,
          password: userData.password
        });
        
        token = loginResponse.data.token;
        userId = loginResponse.data.user.id;
        console.log('‚úÖ Login r√©ussi!');
        console.log(`   User ID: ${userId}`);
        console.log(`   Subscription: ${loginResponse.data.user.subscription_type || 'undefined'}`);
        console.log(`   Premium: ${loginResponse.data.user.is_premium || 'undefined'}`);
      } else {
        throw error;
      }
    }
    
    // 3. Test d'envoi de message (utilisateur gratuit)
    console.log('\n3. Test d\'envoi de message (utilisateur gratuit)...');
    try {
      const messageResponse = await axios.post(`${baseURL}/api/messages/conversations`, {
        receiverId: 1,
        content: 'Test message gratuit',
        subject: 'Test Gratuit'
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log(`‚ùå Message envoy√© (anormal): ${messageResponse.status}`);
      
    } catch (error) {
      console.log(`‚úÖ Erreur 403 attendue: ${error.response?.status}`);
      if (error.response?.data) {
        console.log(`   Message: ${error.response.data.message}`);
        console.log(`   Feature: ${error.response.data.feature}`);
        console.log(`   Subscription required: ${error.response.data.subscription_required}`);
      }
    }
    
    // 4. Mettre √† jour vers premium via API directe
    console.log('\n4. Mise √† jour vers premium...');
    try {
      // Utiliser une requ√™te SQL directe via un endpoint temporaire
      const updateResponse = await axios.post(`${baseURL}/api/users/${userId}/upgrade-premium`, {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('‚úÖ Mise √† jour vers premium!');
      console.log(`   R√©ponse: ${JSON.stringify(updateResponse.data)}`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è  Route de mise √† jour non disponible: ${error.response?.status}`);
      console.log('   Mise √† jour manuelle requise dans la base de donn√©es');
    }
    
    // 5. Re-login pour v√©rifier le statut
    console.log('\n5. Re-login pour v√©rifier le statut...');
    const reloginResponse = await axios.post(`${baseURL}/api/auth/login`, {
      email: userData.email,
      password: userData.password
    });
    
    const newToken = reloginResponse.data.token;
    const newUser = reloginResponse.data.user;
    
    console.log('‚úÖ Re-login r√©ussi!');
    console.log(`   Subscription: ${newUser.subscription_type || 'undefined'}`);
    console.log(`   Premium: ${newUser.is_premium || 'undefined'}`);
    
    // 6. Test d'envoi de message (apr√®s mise √† jour)
    console.log('\n6. Test d\'envoi de message (apr√®s mise √† jour)...');
    try {
      const messageResponse = await axios.post(`${baseURL}/api/messages/conversations`, {
        receiverId: 1,
        content: 'Test message premium',
        subject: 'Test Premium'
      }, {
        headers: { Authorization: `Bearer ${newToken}` }
      });
      
      console.log(`‚úÖ Message envoy√© avec succ√®s: ${messageResponse.status}`);
      console.log(`   R√©ponse: ${JSON.stringify(messageResponse.data)}`);
      
    } catch (error) {
      console.log(`‚ùå Erreur lors de l'envoi: ${error.response?.status}`);
      if (error.response?.data) {
        console.log(`   Message: ${error.response.data.message}`);
        console.log(`   Feature: ${error.response.data.feature}`);
        console.log(`   Subscription required: ${error.response.data.subscription_required}`);
      }
    }
    
    console.log('\nüéØ DIAGNOSTIC FINAL:');
    console.log('   - Backend: ‚úÖ Fonctionne');
    console.log('   - Authentification: ‚úÖ Fonctionne');
    console.log('   - Restrictions: ‚úÖ Actives');
    console.log('   - Mise √† jour premium: ‚ö†Ô∏è  Manuelle requise');
    
    console.log('\nüì± INFORMATIONS DE TEST:');
    console.log(`   Email: ${userData.email}`);
    console.log(`   Mot de passe: ${userData.password}`);
    console.log(`   Statut: ${newUser.subscription_type || 'free'}`);
    console.log(`   Premium: ${newUser.is_premium || false}`);
    
    console.log('\nüîó URL de test frontend:');
    console.log('   https://web-250vi39y0-marvynshes-projects.vercel.app/');
    
    console.log('\nüîß PROCHAINES √âTAPES:');
    console.log('   1. Mettre √† jour manuellement l\'utilisateur vers premium');
    console.log('   2. Tester l\'envoi de messages');
    console.log('   3. V√©rifier le frontend');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response?.data) {
      console.error('   D√©tails:', JSON.stringify(error.response.data));
    }
  }
}

finalFixAndTest(); 